pseudo code:

on redirect sheet, start in reverse order
first_line = 0
  for line in sheet:
    check that line starts with `validurls`:
      if not, skip line.
      if yes:
        check if first_line > 0:
          if yes:
            write `url_key` and `url_value` to `redirects.json` in JSON formatting
            set first_line = 1
            go back to top of for loop.
          else:
            continue.
        check if current `url_key` is assigned as a `url_value` for _any_ and _all_ of the other values in `assets/js/broken_redirect_list.js`:
          if yes:
            keep track of which `url_key` the _current_ `url_key` is assigned to as a value.
            don't do anything else with the current 'url_key'.
            assign the current `url_value` to the same existing `url_key` that the `current_url` key is assigned to.
            go back to top of for loop.
          else:
            check if current `url_key` already exists as a key.
            if yes:
              check if the current `url_value` is already assigned to this key:
                if yes:
                  write the `url_value` to the existing `url_key` in the `redirects.json` in JSON formatting.
                  go back to top of for loop.
                if no:
                  skip.
                  go back to top of for loop. 
            if no:
              write `url_key` and `url_value` to `redirects.json` in JSON formatting
              go back to top of for loop.

GOAL:
A script that generates a JSON dictionary of key value pairs to determine the _newest_ link 1 or more _older_ URLs should be redirected to. its always ok for 1 new URL to be linked from several old URLs but not the other way around.

THINGS TO KNOW:
script should be in python.
this is in a git repository. use git to figure out ROOT directory.
newly created files can be created directly in ROOT.
script is stored in `./scripts` (for context, but that shouldn't matter for the script itself if you are using git to determine root).

here is syntax of `assets/js/broken_redirect_list.js`:
```
validurls['OLD'] = 'NEW';
```

meaning these are the vars:
```
validurls['url_value'] = 'url_key';
```

here's an example:
```
validurls['/docs/user_guide/getting_started/use_cases/lead_scoring'] = '/docs/user_guide/getting_started/b2b_use_cases/lead_scoring/';
'url_key' = '/docs/user_guide/getting_started/b2b_use_cases/lead_scoring/'
'url_value' = '/docs/user_guide/getting_started/use_cases/lead_scoring'
```

here's a slightly bigger snippet:
```
validurls['/docs/developer_guide/platform_integration_guides/swift/initial_sdk_setup/overviewother_sdk_customizations/#optional-idfa-collection/'] = '/docs/developer_guide/platform_integration_guides/legacy_sdks/ios/initial_sdk_setup/other_sdk_customizations/#optional-idfa-collection';

validurls['/docs/user_csv_lambda/'] = '/docs/user_guide/data_and_analytics/cloud_ingestion';

validurls['/docs/user_guide/engagement_tools/segments/beacon_support/'] = '/docs/user_guide/engagement_tools/locations_and_geofences/location_tracking/#partnership-support-for-beacon-and-geofence';

validurls['/docs/developer_guide/platform_wide/sdk_authentication'] = '/docs/developer_guide/authentication';
validurls['/docs/developer_guide/platform_wide/braze_actions'] = '/docs/developer_guide/braze_actions';
validurls['/docs/developer_guide/platform_integration_guides/sdk_changelogs'] = '/docs/developer_guide/changelogs';
validurls['/docs/developer_guide/customization_guides/content_cards'] = '/docs/developer_guide/content_cards';
validurls['/docs/developer_guide/customization_guides/content_cards/creating_custom_content_cards'] = '/docs/developer_guide/content_cards/creating_custom_content_cards';
validurls['/docs/developer_guide/customization_guides/content_cards/customizing_behavior'] = '/docs/developer_guide/content_cards/customizing_behavior';
validurls['/docs/developer_guide/customization_guides/content_cards/customizing_feed'] = '/docs/developer_guide/content_cards/customizing_feed';
validurls['/docs/developer_guide/customization_guides/content_cards/customizing_styles'] = '/docs/developer_guide/content_cards/customizing_styles';
validurls['/docs/developer_guide/customization_guides/content_cards/logging_analytics'] = '/docs/developer_guide/content_cards/logging_analytics';
```

PSUDEO CODE:

create `redirects.json` file (for now don't delete this later on, so i can check output for testing)
if content already exists on `temp` delete it. (i think there is a 1-liner that lets you create/delete simultaneously. this doesn't need an actual if statement)
`redirect` = `assets/js/broken_redirect_list.js`:

create_dict()
  simply map 1:1.

merge_duplicate_keys()
go to `redirect`
start in reverse order
loop 1: for `line` on `redirect`:
  set/get `url_key` and `url_value`
  if `redirects.json` not empty:
    loop 2: for each JSON `stored_key`:
      loop 3: for each JSON `stored_value`:
        if current `url_key` == `stored_value`:
          add current `url_value` to current `stored_key`
          go back to loop 1.
        else:
          continue through loop 2, ending loop 3 for `line`.
      if current `url_key` == `stored_key`:
        add current `url_value` to current `stored_key`.
        go back to loop 1.
      else:
        create new entry in `redirects.json` with `url_key` set to `stored_key` and `url_value` set to `stored_value`.


merge_descendants()
go to `redirects.json`
start in normal order (i.e. id is the smallest id on the page)
for each `key` on `redirects.json`:
  `current_key` = `key`
  for each `listed_key` in `redirects.json`:
    for each `value` in `key`:
      if `current_key` != `value`:
        do nothing
      else:
        add all of `current_key`'s values to `key`, _then_
        fully remove `current_key` and all directly assigned all values from `redirects.json`
    * go to next `key` in `redirects.json`

    the loop should go sequentially, ie:

# If A redirects to B, and B to C, both A and B are considered descendants of C.
# This function, merges all descendants into the newest parent (in this case C), 
# by starting with the first entry and checking if it exists as a value in the
# last entry. If it does, all the values assigned to the first entry are 
# reassigned to the last entry, and then the first entry is removed. If it
# does not exist in the last entry, it then checks if it exists in the  
# next-to-last entry. If the first entry can not be found in any entries, it 
# is not a descendants.

# the old A key. To do this, start with first entry and check to see if 


for each 'key' in 'redirects.json', start with the first entry and check to see 
if it shows up as a 'value' in the last entry. 

then entry 2.
Then entry 3.
etc.

but it should always compare in _reverse_ order.

so entry 1 against last entry.
then if no matches
entry 1 aginst 2nd to last entry.
then if no matches
entry 1 aginst 3rd to last entry.
if match: merge into 3rd to last. delete entry 1, then go to next evaluation

evaluate entry 2 against last entry
then if no matches
evaluate entry 2 against 2nd to last entry
etc.



create_new_redirect_file()

1. creates a new file in root called: `broken_redirect_list.js`
2. at the very top of the file adds:

```
var validurls = (typeof validurls === "undefined")  ? {} : validurls;
```

3. starts on first line of redirects.json (i.e. smallest ID) then writes a line to the new redirect file for _each_ value assigned to a key.

i.e. if a key has 2 values like this:

```
"/docs/best_practices/#email": {
        "id": 6,
        "url_values": [
            "/docs/help/help_articles/email/",
            "/docs/help/best_practices/email/overview/"
        ]
    },
```

it should write the following lines:

```
validurls['/docs/help/help_articles/email/'] = '/docs/best_practices/#email';
validurls['/docs/help/best_practices/email/overview/'] = '/docs/best_practices/#email';
```

4. then at the very end of the file, print this (note the newlines above and below).

```

// validurls['OLD'] = 'NEW';

```
